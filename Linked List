

class Node:
    def __init__(self,value):
        self.value=value
        self.next=None

class Linked_List:
    def __init__(self,value):
        new_node=Node(value)        
        self.head=new_node
        self.tail=new_node
        self.length=1

    def print_list(self):
        temp=self.head
        while temp is not None:
            print(temp.value)
            temp=temp.next

    def append(self,value):
        new_node=Node(value)
        if self.length==0:
            self.head=new_node
            self.tail=new_node  
        else:
            self.tail.next=new_node
            self.tail=new_node
        self.length+=1
        return True

    def pop(self):
        if self.length==0:              #if there is empty linker list
            return None
        temp=self.head
        pre=self.head
        while(temp.next):               #to find the last node = pre
            pre=temp
            temp=temp.next
        self.tail=pre
        self.tail.next=None             #removing the last node
        self.length-=1
        if self.length==0:              #if there was only one node
            self.head=None
            self.tail=None
        return temp.value
    def prepend(self,value):
        new_node=Node(value)
        if self.length==0:
            self.head=new_node
            self.tail=new_node

        new_node.next=self.head
        self.head=new_node
        self.length+=1
        return True

    def popfirst(self):
        if self.length==0:
            return None
        temp=self.head
        self.head=self.head.next
        temp.next=None
        self.length-=1
        if self.length==0:
            self.tail=None
        return temp.value      

    def get(self,index):
        if index<0 or index >= self.length:
            return None
        temp=self.head
        for _ in range(index):
            temp=temp.next
        return temp

    def set(self,index,value):
        if index<0 or index >= self.length:
            return None
        temp=self.head
        for _ in range(index):
            temp=temp.next 
        temp.value=value
        return temp

    def insert(self,index,value):
        if index<0 or index>self.length:
            return False
        if index==0:
            return self.prepend(value)
        if index==self.length:
            return self.append(value)
        new_node=Node(value)
        temp = self.get(index-1) 
        new_node.next=temp.next
        temp.next=new_node
        self.length+=1
        return True

    def remove(self,index):
        if index<0 or index>=self.length:
            return None
        if index==0:
            return self.popfirst()
        if index==self.length-1:
            return self.pop()
        temp = self.get(index-1)
        pre=temp.next
        temp.next=pre.next
        pre.next=None
        self.length-=1
        return True

    def reverse(self):
        temp=self.head
        self.head=self.tail
        self.tail=temp
        after=temp.next
        before=None
        for _ in range(self.length):
            after=temp.next
            temp.next=before
            before=temp
            temp=after

        


my_list=Linked_List(4)
my_list.append(15)
my_list.print_list()
print("\n")
my_list.prepend(7)
my_list.print_list()
print("\n")
print(my_list.get(1))
print("\n")
my_list.set(1,20)
my_list.print_list()
print("\n")
my_list.insert(1,69)
my_list.print_list()
print("\n")
my_list.remove(2)
my_list.print_list()

print("\n")
my_list.reverse()
my_list.print_list()
